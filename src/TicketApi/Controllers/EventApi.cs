/*
 * Ticket system api
 *
 * An API which gives access to all parts of the ticket system
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using TicketApi.Attributes;
using TicketApi.Models;

namespace TicketApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class EventApiController : Controller
    { 
        /// <summary>
        /// Delete event
        /// </summary>
        
        /// <param name="eventId">Event ID</param>
        /// <response code="200">Event updated</response>
        /// <response code="404">Event not found</response>
        [HttpDelete]
        [Route("/api/event/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("EventEventIdDelete")]
        public virtual void EventEventIdDelete([FromRoute]int? eventId)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Get event by Id in system
        /// </summary>
        
        /// <param name="eventId">Event ID</param>
        /// <response code="200">Event loaded</response>
        /// <response code="404">Event not found</response>
        [HttpGet]
        [Route("/api/event/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("EventEventIdGet")]
        public virtual void EventEventIdGet([FromRoute]int? eventId)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Update event
        /// </summary>
        
        /// <param name="eventId">Event ID</param>
        /// <param name="body">Event data</param>
        /// <response code="200">Event updated</response>
        /// <response code="404">Event not found</response>
        [HttpPut]
        [Route("/api/event/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("EventEventIdPut")]
        public virtual void EventEventIdPut([FromRoute]int? eventId, [FromBody]Event body)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all events in system
        /// </summary>
        
        /// <response code="200">Events loaded</response>
        /// <response code="400">Bad request</response>
        [HttpGet]
        [Route("/api/event")]
        [ValidateModelState]
        [SwaggerOperation("EventGet")]
        public virtual void EventGet()
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Create new event
        /// </summary>
        
        /// <param name="body">Event data</param>
        /// <response code="200">Event created</response>
        /// <response code="400">Bad request</response>
        [HttpPost]
        [Route("/api/event")]
        [ValidateModelState]
        [SwaggerOperation("EventPost")]
        public virtual void EventPost([FromBody]Event body)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all events in a city
        /// </summary>
        
        /// <param name="city">city to find events in</param>
        /// <response code="200">Events in city loaded</response>
        /// <response code="404">No events in city found</response>
        [HttpGet]
        [Route("/api/events/{city}")]
        [ValidateModelState]
        [SwaggerOperation("EventsCityGet")]
        public virtual void EventsCityGet([FromRoute]string city)
        { 
            throw new NotImplementedException();
        }
    }
}

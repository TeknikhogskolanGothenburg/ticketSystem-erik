/*
 * Ticket system api
 *
 * An API which gives access to all parts of the ticket system
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using TicketApi.Attributes;
//using TicketApi.Db.Models;
using TicketApi.Db;
using TicketApi.Db.Models;
using TicketApi.Settings;
using Microsoft.Extensions.Options;

namespace TicketApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class EventApiController : Controller
    {
        private DbSettings _dbSettings;
        private EventRepository _eventRepository;

        public EventApiController(IOptions<DbSettings> db)
        {
            this._dbSettings = db.Value;
            this._eventRepository = new EventRepository(_dbSettings.DefaultConnection);
        }

        /// <summary>
        /// Create new event
        /// </summary>
        /// <remarks>Adds a new event in system</remarks>
        /// <param name="body">Event data</param>
        /// <response code="200">Event created</response>
        /// <response code="400">Bad request</response>
        [HttpPost]
        [Route("/api/event")]
        [ValidateModelState]
        [SwaggerOperation("AddEvent")]
        [SwaggerResponse(200, typeof(Object), "Event created")]
        [SwaggerResponse(400, typeof(Object), "Bad request")]
        public virtual IActionResult AddEvent([FromBody]Event body)
        {
            var result = _eventRepository.AddEvent(body);
            if (result == null)
            {
                return BadRequest();
            }
            return new ObjectResult(result);
        }

        /// <summary>
        /// Delete event
        /// </summary>
        /// <remarks>Delete an event</remarks>
        /// <param name="eventId">Event ID</param>
        /// <response code="200">Event deleted</response>
        /// <response code="404">Event not found</response>
        [HttpDelete]
        [Route("/api/event/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEvent")]
        [SwaggerResponse(200, typeof(Object), "Event deleted")]
        [SwaggerResponse(404, typeof(Object), "Event not found")]
        public virtual IActionResult DeleteEvent([FromRoute]int? eventId)
        {
            var result = _eventRepository.DeleteEvent((int)eventId);
            if (result)
            {
                return Ok();
            }
            return NotFound();
        }

        /// <summary>
        /// Get all events matching query
        /// </summary>
        /// <remarks>Returns all events matching query</remarks>
        /// <param name="query">event search string</param>
        /// <response code="200">Event search results loaded</response>
        /// <response code="404">No events found</response>
        [HttpPost]
        [Route("/api/event/search")]
        [ValidateModelState]
        [SwaggerOperation("FindEvents")]
        [SwaggerResponse(200, typeof(List<Event>), "Event search results loaded")]
        [SwaggerResponse(404, typeof(List<Event>), "No events found")]
        public virtual IActionResult FindEvents([FromBody]Search query)
        {
            var result = _eventRepository.FindEvents(query.Searchstring);
            if(result == null || result.Count() == 0)
            {
                return NotFound();
            }
            return new ObjectResult(result);
        }

        /// <summary>
        /// Get event by Id in system
        /// </summary>
        /// <remarks>Returns an event by ID</remarks>
        /// <param name="eventId">Event ID</param>
        /// <response code="200">Event loaded</response>
        /// <response code="404">Event not found</response>
        [HttpGet]
        [Route("/api/event/{eventId}")]
        [ValidateModelState]
        [SwaggerOperation("GetEventById")]
        [SwaggerResponse(200, typeof(Object), "Event loaded")]
        [SwaggerResponse(404, typeof(Object), "Event not found")]
        public virtual IActionResult GetEventById([FromRoute]int? eventId)
        {
            var result = _eventRepository.GetEventById((int)eventId);
            if (result == null)
            {
                return NotFound();
            }
            return new ObjectResult(result);
        }

        /// <summary>
        /// Get all events in system
        /// </summary>
        /// <remarks>Returns all events</remarks>
        /// <response code="200">Events loaded</response>
        /// <response code="400">Bad request</response>
        [HttpGet]
        [Route("/api/event")]
        [Route("/api/event/{offset}/{maxLimit}")]
        [ValidateModelState]
        [SwaggerOperation("GetEvents")]
        [SwaggerResponse(200, typeof(List<Event>), "Events loaded")]
        [SwaggerResponse(404, typeof(List<Event>), "Not Found")]
        public virtual IActionResult GetEvents([FromRoute]int offset = 0, [FromRoute]int maxLimit = 20)
        {
            var result = _eventRepository.GetEvents(offset, maxLimit);
            if (result == null || result.Count() == 0)
            {
                return NotFound();
            }
            return new ObjectResult(result);
        }

        /// <summary>
        /// Update event
        /// </summary>
        /// <remarks>Update an event</remarks>
        /// <param name="body">Event data</param>
        /// <response code="200">Event updated</response>
        /// <response code="404">Event not found</response>
        [HttpPut]
        [Route("/api/event")]
        [ValidateModelState]
        [SwaggerOperation("UpdateEvent")]
        [SwaggerResponse(200, typeof(Object), "Event updated")]
        [SwaggerResponse(404, typeof(Object), "Event not found")]
        public virtual IActionResult UpdateEvent([FromBody]Event body)
        {
            var result = _eventRepository.UpdateEvent(body);
            if (result == null)
            {
                return NotFound();
            }
            return new ObjectResult(result);
        }
    }
    
    
}

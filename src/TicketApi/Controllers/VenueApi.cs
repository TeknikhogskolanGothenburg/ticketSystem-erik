/*
 * Ticket system api
 *
 * An API which gives access to all parts of the ticket system
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using TicketApi.Attributes;
using TicketApi.Models;

namespace TicketApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class VenueApiController : Controller
    {
        /// <summary>
        /// Add Venue
        /// </summary>
        /// <remarks>Add new venue to system</remarks>
        /// <param name="body">Venue data</param>
        /// <response code="200">Venue added</response>
        /// <response code="400">Bad request</response>
        [HttpPost]
        [Route("/api/venue")]
        [ValidateModelState]
        [SwaggerOperation("AddVenue")]
        public virtual void AddVenue([FromBody]Venue body)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete venue
        /// </summary>
        /// <remarks>Delete a venue</remarks>
        /// <param name="venueId">Venue ID</param>
        /// <response code="200">Venue deleted</response>
        /// <response code="404">Bad request</response>
        [HttpDelete]
        [Route("/api/venue/{venueId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteVenue")]
        public virtual void DeleteVenue([FromRoute]int? venueId)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Get venue by Id
        /// </summary>
        /// <remarks>Returns venue by ID</remarks>
        /// <param name="venueId">Venue ID</param>
        /// <response code="200">Venues loaded</response>
        /// <response code="404">Venue not found</response>
        [HttpGet]
        [Route("/api/venue/{venueId}", Name = "GetVenue")]
        [ValidateModelState]
        [SwaggerOperation("GetVenueById")]
        public virtual void GetVenueById([FromRoute]int? venueId)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all venues
        /// </summary>
        /// <remarks>Returns all venues</remarks>
        /// <response code="200">Venues loaded</response>
        /// <response code="400">Bad request</response>
        [HttpGet]
        [Route("/api/venue")]
        [ValidateModelState]
        [SwaggerOperation("GetVenues")]
        public virtual void GetVenues()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Update venue
        /// </summary>
        /// <remarks>Update a venue in the system</remarks>
        /// <param name="venueId">Venue ID</param>
        /// <param name="body">Venue data</param>
        /// <response code="200">Venue updated</response>
        /// <response code="400">Bad request</response>
        [HttpPut]
        [Route("/api/venue/{venueId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVenue")]
        public virtual void UpdateVenue([FromRoute]int? venueId, [FromBody]Venue body)
        {
            throw new NotImplementedException();
        }
    }
}

/*
 * Ticket system api
 *
 * An API which gives access to all parts of the ticket system
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TicketApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullEventDate :  IEquatable<FullEventDate>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name="eventId")]
        public int? EventId { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="eventName")]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets EventHtmlDescription
        /// </summary>
        [DataMember(Name="eventHtmlDescription")]
        public string EventHtmlDescription { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name="eventDate")]
        public DateTime? EventDate { get; set; }

        /// <summary>
        /// Gets or Sets VenueId
        /// </summary>
        [DataMember(Name="venueId")]
        public int? VenueId { get; set; }

        /// <summary>
        /// Gets or Sets VenueName
        /// </summary>
        [DataMember(Name="venueName")]
        public string VenueName { get; set; }

        /// <summary>
        /// Gets or Sets VenueCity
        /// </summary>
        [DataMember(Name="venueCity")]
        public string VenueCity { get; set; }

        /// <summary>
        /// Gets or Sets VenueCountry
        /// </summary>
        [DataMember(Name="venueCountry")]
        public string VenueCountry { get; set; }

        /// <summary>
        /// Gets or Sets NoAvailableSeats
        /// </summary>
        [DataMember(Name="noAvailableSeats")]
        public int? NoAvailableSeats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullEventDate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventHtmlDescription: ").Append(EventHtmlDescription).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  VenueId: ").Append(VenueId).Append("\n");
            sb.Append("  VenueName: ").Append(VenueName).Append("\n");
            sb.Append("  VenueCity: ").Append(VenueCity).Append("\n");
            sb.Append("  VenueCountry: ").Append(VenueCountry).Append("\n");
            sb.Append("  NoAvailableSeats: ").Append(NoAvailableSeats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullEventDate)obj);
        }

        /// <summary>
        /// Returns true if FullEventDate instances are equal
        /// </summary>
        /// <param name="other">Instance of FullEventDate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullEventDate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    EventId == other.EventId ||
                    EventId != null &&
                    EventId.Equals(other.EventId)
                ) && 
                (
                    EventName == other.EventName ||
                    EventName != null &&
                    EventName.Equals(other.EventName)
                ) && 
                (
                    EventHtmlDescription == other.EventHtmlDescription ||
                    EventHtmlDescription != null &&
                    EventHtmlDescription.Equals(other.EventHtmlDescription)
                ) && 
                (
                    EventDate == other.EventDate ||
                    EventDate != null &&
                    EventDate.Equals(other.EventDate)
                ) && 
                (
                    VenueId == other.VenueId ||
                    VenueId != null &&
                    VenueId.Equals(other.VenueId)
                ) && 
                (
                    VenueName == other.VenueName ||
                    VenueName != null &&
                    VenueName.Equals(other.VenueName)
                ) && 
                (
                    VenueCity == other.VenueCity ||
                    VenueCity != null &&
                    VenueCity.Equals(other.VenueCity)
                ) && 
                (
                    VenueCountry == other.VenueCountry ||
                    VenueCountry != null &&
                    VenueCountry.Equals(other.VenueCountry)
                ) && 
                (
                    NoAvailableSeats == other.NoAvailableSeats ||
                    NoAvailableSeats != null &&
                    NoAvailableSeats.Equals(other.NoAvailableSeats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();
                    if (EventName != null)
                    hashCode = hashCode * 59 + EventName.GetHashCode();
                    if (EventHtmlDescription != null)
                    hashCode = hashCode * 59 + EventHtmlDescription.GetHashCode();
                    if (EventDate != null)
                    hashCode = hashCode * 59 + EventDate.GetHashCode();
                    if (VenueId != null)
                    hashCode = hashCode * 59 + VenueId.GetHashCode();
                    if (VenueName != null)
                    hashCode = hashCode * 59 + VenueName.GetHashCode();
                    if (VenueCity != null)
                    hashCode = hashCode * 59 + VenueCity.GetHashCode();
                    if (VenueCountry != null)
                    hashCode = hashCode * 59 + VenueCountry.GetHashCode();
                    if (NoAvailableSeats != null)
                    hashCode = hashCode * 59 + NoAvailableSeats.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullEventDate left, FullEventDate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullEventDate left, FullEventDate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
